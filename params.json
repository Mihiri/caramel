{"name":"Caramel","tagline":"A bootstrap project to create fully dynamic websites using jaggery","body":"# Lets Start Tasting Caramel\r\nCaramel is a MVC framework built for [Jaggery](http://jaggeryjs.org). The intent of the framework is to bootstrap application development and enforce a standard for developing web applications using Jaggery. By no means Caramel trying to lock down developer creativity or freedom but simply trying enforce discipline to large development teams working on Jaggery projects.\r\n\r\nA web application written according to Caramel, takes a certain structure, this is to separate the models, controllers and the views\r\n\r\nLets learn by an example; Our use case for the study is a static blog. where you drop posts as files to a defined location and the blog will pick them and show in an appropriately formatted UI\r\n\r\nThere are few core elements in Caramel\r\n\r\n* **Application config (app.js)** - Place where you define the context of the application, default theme    and other configuration\r\n* **Main controller** - This is the place which is invoked by a request (the page URL you hit in the browser)\r\n* **Theme** - The place where you put all the templates and reusable template partials\r\n* **Renderer** - The page that contains the rendering function for a particular template\r\n\r\nApart from the above constructs, some of the important concepts behind Caramel is the use of Partials, Pages, Helpers and Modules \r\n\r\n* **Partials** - A section of html that can be plugged to the main page (i.e: Footer, Navigation, Header)\r\n* **Pages** - The main template which is like a container or a layout this can consist of many partial elements and is rendered during runtime based on the data set.\r\n* **Helpers** - Helper functions that can alter the data rendered on the template (i.e. providing i18n support)\r\n* **Modules** - Modules create information which is needed for views (i.e if you want to call a DB and fetch some data, you do it in a module)\r\n  \r\n\r\nBefore we start with the blog example; First let's write a simple Hello World Jaggery App.\r\n\r\n### A simple “Hello World” with Caramel\r\n\r\nFirst the application config ``/hello/app.js``\r\n\r\n```js\r\ncaramel.configs({\r\n    context: '/blog',\r\n    negotiation: true,\r\n    themer: function () {\r\n        return 'classic';\r\n    }\r\n});\r\n```\r\n\r\nThe meaning of defining a theme is that, by a configuration change, a new theme can be plugged to the application, and the concept is native to Caramel\r\n\r\nLets call the homepage of the app “index.jag” (``/hello/index.jag``). In Caramel, the page that servers the request act as one of the controllers of the app. it defines what data needs to be presented in that particular page. Content of the page will be as follows\r\n\r\n```js\r\n<%\r\n   var caramel,\r\n   body = \"Lorem ipsum dolor sit amet\";\r\n\r\n   caramel = require('caramel').caramel;\r\n   caramel.render({\r\n  \t 'title': {text :'Hello World'}, // set html title for index page\r\n  \t 'body': {text:body} //set html body for index page\r\n   });\r\n%>\r\n```\r\nThis script will provide the title as \"Hello World\" and the body as \"Lorem ipsum\" to caramel render function.\r\n\r\nNow lets move to the theme, first we need to set handlebars as the default caramel theming engine. Under the ``themes/classic`` directory lets create ``theme.js`` script\r\n\r\n```js\r\nvar engine = caramel.engine('handlebars', (function () {\r\n}()));\r\n```\r\n\r\nlets write our handlebars template which is going to define the view for our theme. Create simple.hbs inside ``themes/classic/pages``\r\n\r\n```html\r\n<html>\r\n<head>\r\n    <title>{{include title}}</title>\r\n</head>\r\n<body>\r\n    <div>{{include body}}</div>\r\n</body>\r\n</html>\r\n```\r\n\r\nThis will let our theme to include the title and the body [partials](http://mustache.github.io/mustache.5.html), which we are going to create in the next step. Partials come to play when you have a single template that you need to use in different contexts. For example you can use above template in different contexts by setting different titles and body contents.\r\n\r\nNow lets create above inside ``themes/classic/partials/title.hbs`` and ``body.hbs`` directory, \r\n\r\n**title.hbs**\r\n``\r\n{{{title}}}\r\n``\r\n\r\n**body.hbs**\r\n``\r\n{{{body}}}\r\n``\r\n\r\nLets move to the renderer, Create ``inside themes/classic/renderers/index.js`` this is the rendering function for index.jag page. It define from which partial the title has to be rendered and whats the data set needed for the partial\r\n\r\n```js\r\nvar render = function (theme, data, meta, require) {\r\n\ttheme('simple', {\r\n   \ttitle: [\r\n  \t\t { partial:'title', context: data.title}\r\n  \t ],\r\n  \t body: [\r\n  \t\t { partial:'body', context: data.body}\r\n  \t ]\r\n\t});\r\n};\r\n```\r\n\r\nHit hello/index.jag in the browser and that should render over caramalized hello world app. The final directory structure of the app will be\r\n\r\n```\r\n/index.jag\r\n/themes\r\n+---/classic\r\n-------/theme.js\r\n+------/renderers\r\n------------/index.js\r\n+------/partials\r\n------------/title.hbs\r\n------------/body.hbs\r\n+------/pages\r\n----------/simple.hbs\r\n```\r\n\r\n##Lets write a real world application\r\n\r\nAs we talked about, lets take a blog engine as an example, and compose one using caramel.\r\n\r\nFirst create a module with a function  which go through files within a given directory and reads file content. Will call this module reader, create reader.js inside top level modules directory with readPosts function. [/modules/reader.js]\r\n\r\n```js\r\nvar readPosts = function () {\r\n    var path = \"content/posts/\";\r\n    var dir = new File(path);\r\n    var list = dir.listFiles();\r\n    var body = \"\";\r\n    var timeArray = [];\r\n\r\n    for(var i=0; i < list.length; i++) {\r\n   \t var timestamp = list[i].getName(); //read the filename, file created //timestamp\r\n   \t timeArray.push(timestamp);\r\n         // sort filename array in //order to display newest post on the top\r\n   \t timeArray.sort(function(a,b){return a-b}); \r\n    }\r\n\r\n    while(filename=timeArray.pop()) {\r\n         var blogFile = new File(path+filename);\r\n         blogFile.open(\"r\");\r\n         var post = \"\";\r\n         post = blogFile.readAll();\r\n         body +=post;\r\n         body +=\"<br/>\";\r\n         blogFile.close();\r\n    }\r\n    \r\n    return body;\r\n};\r\n```\r\n\r\nWe need to require this module within our main Controller, so let's update our home page index.jag \r\n\r\n```js\r\n<%\r\n    var caramel,\r\n    reader = require('/modules/reader.js'), //include our reader module\r\n    caramel = require('caramel').caramel;\r\n\r\n    caramel.render({\r\n   \t 'title': {text :'Blog'},\r\n   \t 'body': {text:reader.readPosts()}\r\n    });\r\n%>\r\n```\r\n\r\nAs in our Hello World app, we need to define handlebars as the default themeing engine. Under the ``themes/classic`` directory lets create theme.js\r\n\r\n```js\r\nvar engine = caramel.engine('handlebars', (function () {\r\n}()));\r\n```\r\n\r\nlets write some HTML with handlebars which is going to define the view for our theme classic. As we have done earlier, create ``themes/classic/pages/simple.hbs``\r\n\r\n```html\r\n<html>\r\n<head>\r\n<title>{{include title}}</title>\r\n<link href=\"{{url \"/themes/classic/css/styles.css\"}}\" rel=\"stylesheet\">\r\n{{css .}}\r\n<script src=\"{{url \"/themes/classic/js/scripts.js\"}}\"></script>\r\n{{js .}}\r\n</head>\r\n<body>\r\n{{>header}}\r\n<div>{{include body}}</div>\r\n{{>footer}}\r\n</body>\r\n<html>\r\n``` \r\n\r\nThe above is the page layout that will let us include the title, header, footer and the body sections (Partials)\r\n\r\n``{{css .}}`` and ``{{js .}} are two helpers that includes default css and js in respective directories, these helpers should be placed to ``themes/classic/helpers`` and will look like\r\n\r\n```js\r\nvar resources = function (page, meta) {\r\n\treturn {\r\n   \tjs: ['navigation.js', 'jquery.validate.js'],\r\n   \tcss: ['navigation.css']\r\n\t};\r\n};\r\n```\r\n\r\nInside Partials we have ``title.hbs`` , ``body.hbs`` and ``footer.hbs`` as same as in ``Hello World`` app\r\n\r\nOur renderer is also the same at ``themes/classic/renderers``\r\n\r\n```js\r\nvar render = function (theme, data, meta, require) {\r\n\ttheme('simple', {\r\n   \ttitle: [\r\n  \t\t { partial:'title', context: data.title}\r\n  \t ],\r\n  \t body: [\r\n  \t\t { partial:'body', context: data.body}\r\n  \t ]\r\n\t});\r\n};\r\n```\r\n\r\nNow create few HTML formatted files inside ``content/posts`` directory with created timestamp as the filename and browse our home page. You can checkout the sample app from [GitHub]()","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}