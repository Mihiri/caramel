{"name":"Caramel","tagline":"A bootstrap project to create fully dynamic websites using jaggery","body":"## Lets Start Tasting Caramel\r\nCaramel is a MVC framework built for [Jaggery](http://jaggeryjs.org). The intent of the framework is to bootstrap application development and enforce a standard for developing web applications using Jaggery. By no means Caramel trying to lock down developer creativity or freedom but simply trying enforce discipline to large development teams working on Jaggery projects.\r\n\r\nA web application written according to Caramel, takes a certain structure, this is to separate the models, controllers and the views\r\n\r\nLets learn by an example; Our use case for the study is a static blog. where you drop posts as “markdown” formatted files to a defined location and the blog will pick them and show in an appropriately formatted UI\r\n\r\nThere are few core elements in Caramel\r\n1. Application config (app.js) - Place where you define the context of the application, default theme and other configuration\r\n1. Main controller - This is the place which is invoked by a request (the page URL you hit in the browser)\r\n1. Theme - The place where you put all the templates and reusable template partials\r\n1. Renderer - The page that contains the rendering function for a particular template  \r\n\r\nBefore we start with the blog example; First let's write a simple Hello World Jaggery App.\r\n\r\n### A simple “Hello World” with Caramel\r\n\r\nFirst the application config ``/hello/app.js``\r\n\r\n```js\r\ncaramel.configs({\r\n    context: '/blog',\r\n    negotiation: true,\r\n    themer: function () {\r\n        return 'classic';\r\n    }\r\n});\r\n```\r\n\r\nThe meaning of defining a theme is that, by a configuration change, a new theme can be plugged to the application, and the concept is native to Caramel\r\n\r\nLets call the homepage of the app “index.jag” (``/hello/index.jag``). In Caramel, the page that servers the request act as one of the controllers of the app. it defines what data needs to be presented in that particular page. Content of the page will be as follows\r\n\r\n```js\r\n<%\r\n   var caramel,\r\n   body = \"Lorem ipsum dolor sit amet\";\r\n\r\n   caramel = require('caramel').caramel;\r\n   caramel.render({\r\n  \t 'title': {text :'Hello World'}, // set html title for index page\r\n  \t 'body': {text:body} //set html body for index page\r\n   });\r\n%>\r\n```\r\nThis script will provide the title as \"Hello World\" and the body as \"Lorem ipsum\" to caramel render function.\r\n\r\nNow lets move to the theme, first we need to set handlebars as the default caramel theming engine. Under the ``themes/classic`` directory lets create ``theme.js`` script\r\n\r\n```js\r\nvar engine = caramel.engine('handlebars', (function () {\r\n}()));\r\n```\r\n\r\nlets write our handlebars template which is going to define the view for our theme. Create simple.hbs inside ``themes/classic/pages``\r\n\r\n```html\r\n<html>\r\n<head>\r\n    <title>{{include title}}</title>\r\n</head>\r\n<body>\r\n    <div>{{include body}}</div>\r\n</body>\r\n</html>\r\n```\r\n\r\nThis will let our theme to include the title and the body [partials](http://handlebarsjs.com/expressions.html), which we are going to create in the next step. Partials come to play when you have a single template that you need to use in different contexts. For example you can use above template in different contexts by setting different titles and body contents.\r\n\r\nNow lets create above inside ``themes/classic/partials/title.hbs`` and ``body.hbs`` directory, \r\n\r\ntitle.hbs\r\n``\r\n{{{title}}}\r\n``\r\n\r\nbody.hbs\r\n``\r\n{{{body}}}\r\n``\r\n\r\nLets move to the renderer, Create ``inside themes/classic/renderers/index.js`` \r\n\r\n```js\r\nvar render = function (theme, data, meta, require) {\r\n\ttheme('simple', {\r\n   \ttitle: [\r\n  \t\t { partial:'title', context: data.title}\r\n  \t ],\r\n  \t body: [\r\n  \t\t { partial:'body', context: data.body}\r\n  \t ]\r\n\t});\r\n};\r\n```\r\n\r\n\r\nNow you can browse the homepage and it will display rendered web page with  Hello Title \r\nas the  title and  Hello World as the body.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}