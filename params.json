{"name":"Caramel","tagline":"A bootstrap project to create fully dynamic websites using jaggery","body":"### Lets Start Tasting Caramel\r\nCaramel is a MVC framework built for [Jaggery](http://jaggeryjs.org). The intent of the framework is to bootstrap application development and enforce a standard for developing web applications using Jaggery. By no means Caramel trying to lock down developer creativity or freedom but simply trying enforce discipline to large development teams working on Jaggery projects.\r\n\r\nA web application written according to Caramel, takes a certain structure, this is to separate the models, controllers and the views\r\n\r\nLets learn by an example; Our use case for the study is a static blog. where you drop posts as “markdown” formatted files to a defined location and the blog will pick them and show in an appropriately formatted UI\r\n\r\nCaramel application config (app.js)\r\n```js\r\ncaramel.configs({\r\n    context: '/blog',\r\n    negotiation: true,\r\n    themer: function () {\r\n        return 'classic';\r\n    }\r\n});\r\n```\r\n\r\nThe app config informs caramel to use the specified theme to render the provided data, it also specifies the application context and if content negotiation is enabled or not, which we will get back later.\r\n\r\nThe meaning of defining a theme is that, by a configuration change, a new theme can be plugged to the application, and the concept is native to Caramel\r\n\r\n### A simple “Hello World” with Caramel\r\nBefore we start with the blog example; First let's write a simple Hello World Jaggery App. \r\n\r\nApplication name : hello, Theme: default \r\nLets call the homepage of the app “home.jag”. In Caramel, the page that servers the request act as one of the controllers of the app. it defines what data needs to be presented in that particular page. Content of the page can be as follows","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}